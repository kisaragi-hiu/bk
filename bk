#!/usr/bin/env python
"""
bk: key-value pair interface
bk stores key-value pairs in a JSON file, and provides an interface to retrieve
values. The file can be specified with the environment variable $BK_FILE,
otherwise it is ~/.local/share/bk/bk.json by default.
"""

import sys
import json
from os import path, getenv, makedirs, getcwd

DATA = getenv("XDG_DATA_HOME") or path.join(getenv("HOME") or "./", ".local", "share")
BK_JSON = getenv("BK_FILE") or path.join(DATA, "bk", "bk.json")
sys.tracebacklimit = 0


def init_file(force=False):
    "Initialize bk store"
    if path.isfile(BK_JSON) and not force:
        raise FileExistsError(
            BK_JSON
            + " exists, not overwriting. "
            + "Use --force to overwrite regardless."
        )
    dirname = path.dirname(BK_JSON)
    if (not path.isdir(dirname)) and dirname != "":
        makedirs(dirname)
    with open(BK_JSON, "w") as bk_stream:
        print("{}", file=bk_stream)


def set_entry(key, value):
    "Set entry KEY in bk store to VALUE"
    if not path.isfile(BK_JSON):
        init_file()
    with open(BK_JSON, "r") as bk_stream:
        tmp = json.load(bk_stream)
    with open(BK_JSON, "w") as bk_stream:
        tmp[key] = value
        json.dump(tmp, bk_stream, indent=2)


def retrieve(key):
    "Retrieve KEY from bk store"
    if not path.isfile(BK_JSON):
        init_file()
    with open(BK_JSON, "r") as bk_stream:
        tmp = json.load(bk_stream)
        if key in tmp:
            print(tmp[key])
        else:
            print("")


def reverse_lookup(value):
    "Print the key for VALUE in the bk store"
    if not path.isfile(BK_JSON):
        init_file()
    with open(BK_JSON, "r") as bk_stream:
        tmp = json.load(bk_stream)
        reverse = {v: k for k, v in tmp.items()}
        if value in reverse:
            print(reverse[value])
        else:
            print("")


def list_entries():
    "List keys in bk store"
    if not path.isfile(BK_JSON):
        init_file()
    with open(BK_JSON, "r") as bk_stream:
        print("\n".join(json.load(bk_stream).keys()).strip())


def delete_entry(key):
    "Delete entry KEY in bk store"
    with open(BK_JSON, "r") as bk_stream:
        tmp = json.load(bk_stream)
    with open(BK_JSON, "w") as bk_stream:
        del tmp[key]
        json.dump(tmp, bk_stream, indent=2)


def show_help(exit_code=0):
    "Show the help message and exit with EXIT_CODE"
    print(
        """
bk: key-value pair interface
bk stores key-value pairs in a JSON file, and provides an interface to retrieve
values. The file can be specified with the environment variable $BK_FILE,
otherwise it is ~/.local/share/bk/bk.json by default.

Usage:
  bk: list all keys (like --list)
  bk <key>: retrieve value for <key>
  bk <key> <value>: set <key> to <value>
  bk <options>

Options:
  --init
    initialize key-value store at $BK_FILE if set, or
    ~/.local/share/bk/bk.json if not
  -l, --list
    list all keys
  --here
    print the key for $(pwd), if any
  --here KEY, --here=KEY
    set KEY to $(pwd)
  -d, --delete=KEY
    delete <key> entry
  -h, --help
    show help (this message)"""
    )
    sys.exit(exit_code)


if len(sys.argv) < 2:  # Zero arguments
    list_entries()
elif sys.argv[1] in ["--init"]:
    if len(sys.argv) == 3 and sys.argv[2] in ["--force"]:
        init_file(force=True)
    else:
        init_file()
elif sys.argv[1] in ["--list", "-l"]:
    list_entries()
elif sys.argv[1] in ["--delete", "-d"]:
    delete_entry(sys.argv[2])
elif sys.argv[1].startswith("--delete="):
    delete_entry(sys.argv[1].replace("--delete=", "", 1))
elif sys.argv[1].startswith("--here="):
    set_entry(sys.argv[1].replace("--here=", "", 1), getcwd())
elif sys.argv[1] in ["--here"]:
    if len(sys.argv) >= 3:
        set_entry(sys.argv[2], getcwd())
    else:
        reverse_lookup(getcwd())
elif sys.argv[1] in ["--help", "-h"]:
    show_help(0)
elif len(sys.argv) == 2:  # One argument that isn't one of the above
    retrieve(sys.argv[1])
else:
    set_entry(sys.argv[1], sys.argv[2])
